/// this is a topic about Adding System Introspection(添加系统自检) /// 
introduction
    Let us consider adding some code to our project that depends on features the target platform may not have. 
    For this example, we will add some code that depends on whether or not the target platform has the log and exp functions. 
    Of course almost every platform has these functions but for this tutorial assume that they are not common.

    If the platform has log and exp then we will use them to compute the square root in the mysqrt function. 
    We first test for the availability of these functions using the CheckCXXSourceCompiles module in MathFunctions/CMakeLists.txt.
    
Solution
    Add the checks for log and exp to MathFunctions/CMakeLists.txt, after the call to target_include_directories():
        MathFunctions/CMakeLists.txt
        target_include_directories(MathFunctions
            INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}
            )

        # link our compiler flags interface library
        target_link_libraries(MathFunctions tutorial_compiler_flags)

        # does this system provide the log and exp functions?
        include(CheckCXXSourceCompiles)
        check_cxx_source_compiles("
          #include <cmath>
          int main() {
            std::log(1.0);
            return 0;
          }
        " HAVE_LOG)
        check_cxx_source_compiles("
          #include <cmath>
          int main() {
            std::exp(1.0);
            return 0;
          }
        " HAVE_EXP)
    If available, use ★target_compile_definitions() to specify HAVE_LOG and HAVE_EXP as PRIVATE compile definitions.
        MathFunctions/CMakeLists.txt
        if(HAVE_LOG AND HAVE_EXP)
          target_compile_definitions(MathFunctions
                                     PRIVATE "HAVE_LOG" "HAVE_EXP")
        endif()
    
    If log and exp are available on the system, then we will use them to compute the square root in the mysqrt function. 
    Add the following code to the mysqrt function in MathFunctions/mysqrt.cxx (don't forget the #endif before returning the result!):
        MathFunctions/mysqrt.cxx
        #if defined(HAVE_LOG) && defined(HAVE_EXP)
        double result = std::exp(std::log(x) * 0.5);
        std::cout << "Computing sqrt of " << x << " to be " << result
            << " using log and exp" << std::endl;
        #else
        double result = x;
    
    We will also need to modify mysqrt.cxx to include cmath.
        MathFunctions/mysqrt.cxx
        #include <cmath>
    
    Run the cmake executable or the cmake-gui to configure the project and then build it with your chosen build tool and run the Tutorial executable.
    
    Which function gives better results now, sqrt or mysqrt?
