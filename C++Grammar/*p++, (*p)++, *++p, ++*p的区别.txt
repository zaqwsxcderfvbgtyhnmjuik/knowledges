/// this is a topic about *p++, (*p)++, *++p, ++*p的区别 ///

/// *p++, (*p)++, *++p, ++*p的区别
// 公共代码
int a[5] = {1, 2, 3, 4, 5};
int *p = a;

// 独自代码
case 1 : *p++  先取指针p指向的值（数组第一个元素1），再将指针p自增1；
    cout<< *p++ <<endl; // 结果为1
    cout<< *p++ <<endl; // 结果为2
    
case 2 : (*p)++  先取指针p指向的值（数组第一个元素1），再将该值自增1（数组的第一个元素变为2）
    cout<< (*p)++ <<endl; // 结果为1，++操作的右结合性
    cout<< (*p)++ <<endl; // 结果为2

case 3 : *++p 先将指针p自增1（此时指向数组第二个元素），* 操作再取出该值
    cout<< *++p <<endl; // 结果为2
    cout<< *++p <<endl; // 结果为3
    
case 4 : ++*p 先取指针p指向的值（数组第一个元素1），再将该值自增1（数组的第一个元素变为2）
    cout<< ++*p <<endl; // 结果为2，++操作的右结合性
    cout<< ++*p <<endl; // 结果为3

remark:
    case 1 和 case 2为一类，*在前面，p在中间，前面*加不加小括号的问题；*加括号则对值进行自增1，反之是对指针自增1
    case 3 和 case 4为一类，p在最后面，前面操作符++和*的先后顺序问题；++和*都是右结合性，谁离p近，谁就先对p进行操作，得到结果res，另一个操作符再对res进行操作
    
