/*****************************************************************服务端步骤************************************************************************************/
#define _WINSOCK_DEPRECATED_NO_WARNINGS			//防止报错
#include <iostream>
#include <WinSock2.h>
using namespace std;

#pragma comment(lib,"ws2_32.lib")

int main()
{
	// 第一步：WSAStartup(...) 添加socket库到应用程序中来
	WORD sockVersion = MAKEWORD(2, 2);//调用2.2版本的socket
	WSADATA wsaData;				  //WSA(Windows Sockets Asynchronous)异步套接字
  
	if (WSAStartup(sockVersion, &wsaData) != 0)	//返回为0则表示初始化成功
		return 0;
 
	// 第二步：socket(...) 创建服务器Socket
	// AF_INET，使用IPV4通信；SOCK_STREAM，使用流式套接字；IPPROTO_TCP，采用TCP协议
	SOCKET serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (serverSocket == INVALID_SOCKET)			//如果创建失败，则输出错误
	{
		cout << "socket error:" << WSAGetLastError() << endl;
		WSACleanup();			//中止Windows Sockets DLL的使用；与上面WSAStartup()配套使用
		return 0;
	}
  
	// 第三步：bind(...)创建服务器Socket套接字成功后，为其绑定一个ip和端口
	// sockaddr_in是一个结构体，需要指定 协议族 + IP地址 + 端口号
	sockaddr_in serverAddr;
	serverAddr.sin_family = AF_INET;				//指定协议族，AF_INET<->IPV4；AF_INET6<->IPV6
	serverAddr.sin_addr.S_un.S_addr = INADDR_ANY;	//指定IP地址
	serverAddr.sin_port = htons(8888);				//指定端口号
 
	// Socket绑定地址，第二个参数注意需要使用强制转换
	if (bind(serverSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
	{
		cout << "Bind Error!" << endl;
		closesocket(serverSocket);
		WSACleanup();
		return 0;
	}
 
	// 第四步：listen(...)建立监听客户端请求的信号，设置最多有5个客户端，进入监听状态
	if (listen(serverSocket, 5) == SOCKET_ERROR)//如果建立失败
	{
		cout << "Listen Error !" << endl;
		closesocket(serverSocket);				//关闭Socket套接字
		WSACleanup();
		return 0;
	}
	cout << "正在监听..." << endl;
 
	// 第五步：accept(...)开始不断处理各个客户端请求
	while (true)// while1
	{
		SOCKET clientSocket = INVALID_SOCKET;	//初始化一个客户端socket
		sockaddr_in clientAddr;					//客户端的地址结构
		int iAddrLength = sizeof(clientAddr);	//求出该结构的长度
		cout << "等待登录..." << endl;
		// 接收客户端的连接请求。第一个参数为服务端Socket,第二个参数用来接收从客户端传来的地址，第三个参数为地址结构的长度
		clientSocket = accept(serverSocket, (SOCKADDR*)&clientAddr, &iAddrLength);//accept为阻塞函数
		
		if (clientSocket == INVALID_SOCKET)		//如果接收失败
		{
			cout << "Accept Error !" << WSAGetLastError() << endl;
			closesocket(serverSocket);
			WSACleanup();
			return 0;
		}
		//inet_ntoa将网络地址转换为字符输出
		cout << "客户端地址：" << inet_ntoa(clientAddr.sin_addr) << endl;
 
		// 第六步：recv(...) 开始不断接收该客户端数据
		char buffFromClient[1024];			//用于接收客户端传来的数据
		while(true)// while2
		{
			memset(buffFromClient, 0, sizeof(buffFromClient));
			//recv也为阻塞函数，只有客户端发送数据过来后，程序才会往下继续走
			int iLenOfRecvData = recv(clientSocket, buffFromClient, sizeof(buffFromClient), 0);
			
			if (iLenOfRecvData > 0)		//如果接收的数据不为空
			{
				cout << buffFromClient << endl;
			}
			else
			{
				cout << "服务器断开，无接收..." << endl;
				break;
			}
      		// 第七步：send(...)：像客户端发送数据
			char sendToClientBuff[1024] = "服务端收到啦！";
			send(clientSocket, sendToClientBuff, sizeof(sendToClientBuff), 0);
		}// end while1
		// 第八步：closesocket(...) 关闭客户端套接字
		closesocket(clientSocket);//关闭与该客户端的套接字
	}// end while2
	// 第九步：关闭服务器套接字
	closesocket(serverSocket);//关闭服务器套接字
	// 第十步：WSACleanup(...) 移除socket库到从应用程序中
	WSACleanup();
}// end main
