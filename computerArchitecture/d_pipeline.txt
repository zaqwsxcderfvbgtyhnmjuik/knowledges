/// this is a topic about pipeline technology——流水线技术 ///  assembly line <== 工厂车间流水线

// 流水线基本概念
    流水线概念：
        产品生产流水线：
            一个问题：
                假设某产品的生产需要4道工序，该产品生产车间以前只有一个工人，一套生产该产品的机器。该工人工作8小时，可以生产120件（即每4分钟生产1件）。
                要将该产品日产量提高到480件，如何实现目标？
            两种解决方案：
                方案一：增加3名工人、3套设备。
                方案二：产品生产采用流水线方式，分为4道工序；增加3名工人，每人负责一道工序。
            两种方案的工作过程对比：
                两种方案中，单件产品的生产时间均不变。
                但在稳定情况下：
                 方案一：每4分钟4件产品同时进入流水线，4件产品同时离开流水线，需要增加三套设备。
                 方案二：每分钟，1件产品进入流水线，1件成品离开流水线，不需要增加任何设备。
            方案二的主要特点：
                每件产品还是要经过4道工序处理，单件产品的加工时间并没有改变，但他将各个工人的操作时间重叠（并行的雏形）在一起，
                使得每件产品的产出时间从表面上看是从原来的4分钟缩减到1分钟，提高了产品的产出率。
        计算机中的流水线：
            指令流水线：
                入——>分析器(△t1)——>执行部件(△t2)——>出
                     流水段1        流水段2
            功能部件流水线：
                计算机中间，它的功能部件都按照流水方式来组织、来运行。
        流水技术：
            将一重复的 时序过程 分解为若干子过程，每个子过程都可有效的在其专用功能段上与其它子过程同时执行，这种技术称为流水技术。
        时-空图：
            从时间和空间两个方面描述流水线的工作过程，横坐标表示时间，纵坐标表示各流水段。
            实例：浮点数加法流水线
               入——>求阶差(△t1)——>对阶(△t2)——>尾数相加(△t3)——>规格化(△t4)——>出
                            1   2   3   4   5   6   7 规格化              
                        1   2   3   4   5   6   7     尾数相加              
                    1   2   3   4   5   6   7         对阶                 
               1    2   3   4   5   6   7             求阶差        ↑   y轴空间轴     
               t1   t2  t3  t4  t5  t6  t7  t8  t9  t10...          ——>x轴时间轴
               演示说明：
                    1~7~n：表示浮点数相加的指令，指令被分解为4个子过程，如指令1，t1时刻完成求阶差并转而进入对阶，t2时刻完成对阶并转而进入尾数相加，t3时刻完成尾数相加并转入规格化，t4时刻完成规格化并完成了该指令的全部子过程而结束。
                    上图完成了7条浮点数相加指令的时空图展示；呈现阶梯状的时空图，7条指令实现了很好地重叠并行运行，从时空图上看，标注数据的空间占据了t10和规格化形成的这个方框的绝大部分，意味着时空图的利用率非常好，进而反映了设备的利用率非常好，硬件资源在这里得到了很充分地利用和发挥。
        流水线特点：
            1) 流水过程由多个相关的子过程组成，这些子过程称为流水线的"级"或"段"或"站"，段的数目称为流水线的"深度"；
            2) 每个子过程由专用的功能段实现；                      <== 方便硬件可以专一化实现
            3) 各功能段的时间应基本相等，通常为一个时钟周期（拍）；  <== 从时空图可以看出，每一个的消耗时间相等，即t[i]-t[i-1] = T常量，i=2,3,4,5,6,7
            4) 流水线需要经过一定的 通过时间 才能稳定；    <== 起步时间，即[t1,t4]时间区间，之后即满载运行
            5) 流水技术适合于 大量重复不间断 的时序过程；  <== 起源于1920年的工业革命
    流水线分类：
        单功能流水线和多功能流水线：
            按流水线所完成的功能分类
            单功能流水线，是指只能完成一种固定功能的流水线
                如：功能单元流水线
            多功能流水线，是指各段可以进行不同的连接，从而完成不同的功能
                如：TI ASC的多功能流水线
                1   输入      输入              输入          
                2   减阶      减阶
                3   对阶      对阶
                4   相加      相加
                5   规格化    规格化 
                6   相乘                        相乘 
                7   累加                        累加
                8   输出      输出              输出
                    分段      ↑浮点加法连接      ↑浮点乘法连接  
        静态流水线和动态流水线：
            按同一时间内流水段的连接方式划分
            静态流水线，是指在同一时间内（同一时刻），流水线的各段只能按同一种功能的连接方式工作。
                如：TI ASC的流水线，适合于处理一串相同的运算操作，比如先是一串浮点加运算后是一串浮点乘法运算，不能加一个乘一个同时进行指令执行
            动态流水线，是指在同一时间内（同一时刻），当某些段正在实现某种运算时，另一些段却在实现另一种运算。
                如：会有很好的高效率，但会使流水线的控制变得很复杂，即可以同一时刻即执行浮点加又执行浮点乘，可以处理不同指令交错相间的一串指令操作。
        部件级、处理机级及处理机间流水线：
            按流水的级别划分
            部件级流水线，又叫运算操作流水线，是把处理机的算术逻辑部件分段，使得各种数据类型的操作能够进行流水；<== 比如说这个部件可能是乘法或加法等功能，在这个部件级进一步细分成流水段，在这个部件范围内进行流水；属于计算机流水线技术里最细微、最底层的部分。
            处理机级流水线，又叫指令流水线，是把解释指令的过程按照流水方式处理；                  <== 即一条指令的执行过程分成流水段，按段来执行；就是把解释指令的过程按照流水方式来进行处理。
            处理机间流水线，又叫宏流水线，是由两个以上的处理机串行地对同一数据流进行处理，每个处理机完成一项任务；<== 每一个流水段都是一个处理机
        标量流水处理机和向量流水处理机：
            按照数据表示来进行分类
            标量流水处理机，是指处理机不具有向量数据表示，仅对标量数据进行流水处理；
                如IBM360/91，Amdahl 470V/6等
            向量流水处理机，是指处理机具有向量数据表示，并通过向量指令对向量的各元素进行处理；
                如TI ASC、STAR-100、CYBER-205、CRAY-1、YH-1等
        线性流水线和非线性流水线：
            按照是否有反馈回路来进行分类
            线性流水线是指流水线的各段串行连接，没有反馈回路；
            非线性流水线是指流水线中除有串行连接的通路外，还有反馈回路                
                实例：
                            ←---------←--------←--------  <== 反馈回路
                            ↓         ↓        ↓       ↑
                    ——>S1——>ⓧ——>S2——>ⓧ——>S3—>ⓧ——>S4—>
                                               ↓ <== 输出
                   虽然流水线仅由四段构成，但有些段可能要重复通过，例如执行任务：输入→S1→S2→S3→S4→S2→S3→S4→S3→输出
                   存在流水线调度问题：确定什么时候向流水线引进新的输入，从而使新输入的数据和先前操作的反馈数据在流水线中不产生冲突，此即所谓流水线调度问题；<== 例如S1和S2之间可能是反馈回来的流入S2也可能是新输入的S1流入S2而产生冲突。

// MIPS基本流水线
    MIPS的一种简单实现：
        实现MIPS指令的一种简单数据通路：
            取指令——>指令译码、读寄存器——>执行 或 有效地址计算——>存储器访问 或 分支操作完成——>写回
        分析：
            这是一种非流水方式；
            将指令执行分为5个阶段；
                1) 取指令周期(IF:Instruction Fetch):
                    操作为：
                        根据PC值从存储器中取出指令，并将指令送入指令寄存器IR；PC值增加4，指向顺序的下一条指令，并将下一条指令的地址放入临时寄存器NPC中。 <== 所谓临时NPC，可能在后续执行过程中PC要变化，比如遇到了转移指令、控制指令等，下条指令的地址会发生变化。 
                        形式化表示：
                            IR<——Mem[PC]
                            NPC<——PC+4
                2) 指令译码、读寄存器周期(ID:Instruction Decode) 
                        操作为：
                            进行指令译码，读IR寄存器（指令寄存器），按照相应寄存器号读寄存器文件，并将读出结果放入两个临时寄存器A和B中，同时对寄存器中的内容的低16位进行符号扩展，然后将符号拓展之后的32位立即值保存在临时寄存器Imm中。
                            形式化表示：
                                A<——Regs[IR6...10]
                                B<——Regs[IR11...15]
                                Imm<——((IR16)^16 ## IR16...31) <== IR低16位进行符号扩展，形成立即数放入Imm寄存器中
                3) 执行 或 有效地址计算周期(EX:Execute)
                    操作为：
                        存储器访问：ALUoutput<——A+Imm
                        寄存器-寄存器ALU：ALUoutput<——A op B
                        寄存器-立即数ALU：ALUoutput<——A op Imm
                        分支操作：ALUoutput<——NPC+Imm;Cond<——(A op 0)
                    问题：为什么执行和有效地址计算可以合并？
                        实际上是MIPS指令系统设计带来的，因为每条指令要不然就是执行某些功能的操作，要不然进行有效地址计算，要不然进行存储器的访存操作，要不然进行条件判断、新的转向地址计算；一条指令不可能对这几项操作同时展开，所以当指令执行到这个周期的时候，这其中只能选择一个操作，所以可以合并这些操作在一个周期中间。                
                4) 存储器访问 或 分支操作完成周期(MEM:memory)
                    访存操作：
                        load:LMD<——LMDMEM[ALUoutput]
                        store:Mem[ALUoutput]<——B
                    分支操作：
                        if(Cond) PC<——ALUoutput else PC<——NPC
                5) 写回周期(WB:Write Back)
                    操作为：
                        寄存器-寄存器型ALU指令：Regs[IR16...20]<——ALUoutput
                        寄存器-立即数型ALU指令：Regs[IR11...15]<——ALUoutput
                        load指令：Regs[IR11...15]<——LMD
            性能分析：
                在该数据通路上，
                分支指令需要4个时钟周期；<== 经过前1,2,3,4周期后，分支指令已经完成了，每个周期一个时钟周期则4个时钟周期（Clock cycle）
                其他指令需要5个时钟周期；
                假设分支指令占总指令数的12%，问CPI（Clock cycle Per Instruction）等于多少？
                    CPI=4x12%+5x(1-12%)=4.88时钟周期（Clock cycle）
                结论：
                    就性能和硬件开销而言，上述实现不是一种优化实现。
            改进方法：
                流水技术
    基本MIPS流水线：
        一种简单的MIPS流水线：
            将上述的一种简单的数据通路流水化，使得：，然后就得到了一条简单的MIPS流水线。
                数据通路中的每一个周期就成为流水线的一段；
                每个时钟周期启动一条指令；
            简单MIPS流水线的流水过程：
                时空图：
                                          时钟周期
                            1   2   3   4   5   6   7   8   9      指令编号  
                            IF  ID  EX  MEM WB                     指令i+0              
                                IF  ID  EX  MEM WB                 指令i+1         
                                    IF  ID  EX  MEM WB             指令i+2          
                                        IF  ID  EX  MEM WB         指令i+3         
                                            IF  ID  EX  MEM WB     指令i+4         
                流水线可以看成是按时间错开的数据通路序列：
                            1   2   3   4   5   6   7   8   9      数据通路编号  
                            IF→ ID→ EX→ MEM→WB                     数据通路i+0              
                                IF→ ID→ EX→ MEM→WB                 数据通路i+1         
                                    IF→ ID→ EX→ MEM→WB             数据通路i+2          
                                        IF→ ID→ EX→ MEM→WB         数据通路i+3         
                                            IF→ ID→ EX→ MEM→WB     数据通路i+4  
            实现流水技术应解决的一些问题：        
                1) 应保证流水线各段不会在同一时钟周期内使用相同的寄存器通路资源；
                    例如：不能要求一个ALU既做有效地址计算，又做减法操作；
                    IF与MEM两个阶段都要访问寄存器，怎么样避免访问冲突？使用程序存储器和数据存储器分开即可；
                    ID与WB两个阶段都要访问寄存器，是否存在冲突？怎样避免？进行寄存器隔离，使其各自访问各自的资源；
                2) PC计算问题
                    为了能够在每个时钟周期启动一条新的指令，流水线必须站IF段获得下一条指令的地址，并将其保存在PC中；
                    但是分支指令会改变PC的值，而且只有在Mem段结束时，这个新值才会被写入PC，出现矛盾；
                    解决办法：
                        改变数据通路，在IF段完成PC计算，但分支指令如何处理呢？ <== 分支指令后续讲如何处理
                3) 合理划分流水段，每段内的操作都必须在一个时钟周期内完成
                4) 流水线寄存器设计
                    为防止寄存器中的值在为流水线中某条指令所用时被流水线中的其他指令所重写，可在流水线各段之间设置 流水线寄存器文件（是一个包含多个其他寄存器的寄存器），也称锁存器；
                    流水线寄存器文件的命名：段A与段B之间的流水线寄存器文件称为A/B；
                    流水线寄存器的作用：同设计它的目的一致；
                    流水线寄存器文件的构成：
                        IF/ID：NPC、IR寄存器             <==此时的NPC为IF段使用的
                        ID/EX：NPC、A、B、Imm、IR寄存器   <==此时的NPC为EX段使用的，即NPC需要在超过一个段中多次被使用，需要有多个物理寄存器来分配给这些段来都作为NPC寄存器使用
                        EX/Mem：Conf、B、IR寄存器
                        Mem/WB：LMD、IR寄存器
            MIPS流水线的操作：
                在任一时刻，流水中的指令仅在流水线中的某一段内执行操作；
                因此只要知道每一流水段，在各指令下进行何种操作，就知道了整个流水线的操作；
            MIPS流水线中多路选择器的控制：流水线中对多路寄存器MUX的控制
                主要是确定如何控制那四个多路选择器：
                    ALU输入端的两个MUX由ID/EX.IR所指出的指令类型控制；
                    IF段的MUX由EX/Mem.Cond域的值控制；
                    WB段的MUX由当前指令类型（Load/ALU）控制；
                
    流水线性能分析：
        
// 流水线中的相关

// 实例分析:MIPS R4000

// 向量处理机
