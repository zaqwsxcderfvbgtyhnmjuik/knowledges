/// this is a topic about unix network programming ///

// 翻译对
    protocol / 协议
    daemon   / 守护进程
    client   / 客户端
    server   / 服务端
    asynchronous callback / 异步回调
    program  / 程序
    process  / 进程
    transmission control protocol  / 传输控制协议（TCP）
    internet protocol  / 网际协议（IP）
    user datagram protocol / 用户数据报协议（UDP）
    local area network / 局域网（LAN）
    router / 路由器
    wide area network / 广域网（WAN）
    
    htonl() / host to network long      <== for uint32_t 
    ntohl() / network to host long      <== for uint32_t 
    htons() / host to network short     <== for uint16_t 
    ntohs() / network to host short     <== for uint16_t 
    
    synopsis/ n. （书、剧本或电影等的）概要，摘要，梗概；提要，概要
    prolog  / n. 序言；开端；开场白（等于 prologue）
    
    AF_INET / address family internet
    PF_INET / protocol family internet
    
    inet_pton() / internet_presentation(表示) to numeric(数值) <== to convert the character string src into a network address structure in the AF_INET or PF_INET address family, then copies the network address structure to dst, dst is written in network byte order.
    inet_ntop() / internet_numeric to presentation 
    
    connect()   / shall attempt to make a connection on a connection-mode socket or to set or reset the peer address of a connectionless-mode socket.
    file descriptor / 文件描述符
    peer address / 对等端网络地址
    
    socket API / 套接字API
    TCP套接字  / TCP endpoint <== 等价
    protocol data unit / 协议数据单元 <== 计算机网络各层对等实体间交换的 单位信息
    segment / 分节 <== 对应于TCP传输层的PDU
    service data unit / 服务数据单元 <== 每层的PDU通过由紧邻下层提供给本层的服务接口，作为下层的服务数据单元（SDU）传递给下层，并由下层间接完成本层的PDU交换；如果本层的PDU大小超过紧邻下层的最大SDU限制，那么本层还要事先把PDU划分成若干个合适的片段让下层分开载送，再在相反方向把这些片段重组成PDU。同一层内SDU作为PDU的净荷(payload)字段出现，因此可以说上层PDU由本层PDU（通过其SDU字段）承载。每层的PDU除用于承载紧邻上层的PDU（即承载数据）外，也用于承载本层协议内部通信所需的控制信息。
    
    application data / 应用数据 <== 应用层实体（如客户或服务器进程）间交换的PDU。<== 其中在TCP应用进程之间交换的是没有长度限制的单个双向字节流；在UDP应用进程之间交换的是其长度不超过UDP发送缓冲区大小的单个记录（record）。
    message / 消息 <== 传输层实体（例如对应某个端口的传输层协议代码的一次运行）间交换的PDU。 <== 其中TCP的PDU特称为分节(segment)。消息或分节是有长度限制的。在TCP传输层中，发送端TCP把来自应用进程的字节流数据（即由应用进程通过一次次输出操作写出到发送端TCP套接字中的数据）按顺序经分割后封装在各个分节中传送给接收端TCP，其中每个分节所封装的数据既可能是发送端应用进程单次输出操作的结果，也可能是连续数次输出操作的结果，而且每个分节所封装的单次输出操作的结果或者首尾两次输出操作的结果，既可能是完整的，也可能是不完整的。具体取决于可在连接建立阶段由对端通告（告知）的最大分节大小（maximum segment size,MSS）以及外出接口（底层物理接口）的最大传输单元（maximum transmission unit,MTU）或 外出路径的路径MTU（如果网络层具有路径MTU发现功能，如IPv6）。 分节除了用于承载应用数据外，也用于建立连接（SYN分节）、终止连接（FIN分节）、中止连接（RST分节）、确认数据接收（ACK分节）、刷送代发数据（PSH分节）和携带紧急数据指针（URG分节），而且这些功能（包括承载数据）可以灵活组合。 UDP传输层相当简单，发送端UDP就把来自应用应用进程的单个记录整个封装在UDP消息中传送给接收端UDP。                                 
    IP datagram / IP数据报 <== 网络层实体间交换的PDU。<== 其长度有限：IPv4数据报最大65535（因为IP数据报报文总长度（首部+数据载荷）字段为16位，因此最大长度为1111 1111 1111 1111，即2^16 - 1 = 65535），IPv6数据报最大65575字节。发送端IP把来自传输层的消息（或TCP分节）整个封装在IP数据报中发送。 IP数据报由IP首部和所承载的传输层数据（即网络层的SDU）构成。过长的IP数据报无法封装在单个帧中。需要先对其SDU（即所承载的传输层数据）进行分片(fragmentation)，再把分成的各个片段（fragment）冠以新的IP首部封装到多个帧中。在一个IP数据报从源端到目的端的传送过程中，分片操作既可能发生在源端，也可能发生在途中，而其逆操作即重组(reassembly)一般只发生在目的端。TCP/IP协议簇为提高效率会尽可能避免IP数据报的分片/重组操作：TCP根据MSS和MTU限定每个分节的大小，以避免IP数据报的分片/重组操作，进而提高性能。另外，IPv6禁止在途中的分片操作（基于其路径MTU发现功能），IPv4也尽量避免这种操作。                                     
    frame  / 帧  <== 链路层实体间交换的PDU。<== 其长度取决于具体的接口；不论是否分片，都由IP数据报作为链路层的SDU传入链路层，并由链路层封装在帧中的数据称为分组（packet，俗称包 <== 此处不会分片了）。可见一个分组既可能是一个完整的IP数据报，也可能是某个IP数据报的SDU的一个片段被冠以新的IP首部后的结果。另外，本书中讨论的MSS是应用层（TCP）与传输层之间的接口属性，MTU则是网络层和链路层之间的接口属性。                    
    
    wrapper function / 包裹函数 <== 用来缩短程序。每个包裹函数完成实际的函数调用，检查返回值，并在发生错误时终止进程；约定包裹函数名是实际函数名的首字母大写形式。
    
    
