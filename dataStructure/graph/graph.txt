/// this is a topic about graph ///

分三个层次展开
    术语(terminology)
    实现(implementation)
    算法(algorithm)

基本术语
    G = (V; E)
        vertex : n = |V|
        edge   : e = |E|
    
    邻接关系：adjacency
        顶点与顶点之间的关系；任何两个顶点之间都允许存在邻接关系————即把两个顶点用线连起来形成一条边（自环情况忽略）。
    
    关联关系：incidence
        顶点与与其相关的边的关系；
        
    无向边：undirected edge
        若邻接顶点u和v的次序无所谓，则(u,v)为无向边；
        
    无向图：undigraph
        所有边均无方向的图，即无向图。
    
    有向边：directed edge 
        若邻接顶点u和v的次序需要考虑，u、v分别称作(u,v)的尾（tail）、头（head），则(u,v)为有向边；
        
    有向图：digraph
        所有边均有方向的图，即有向图。
        
    混合图：mixed graph
        所有边既有有向边又有无向边的图，即混合图。
        
    注意：
        注意力主要集中在有向图上，原因很简单，因为通过有向图我们完全可以表示并且实现无向图以及混合图，这里的技巧是我们可以将任何的一条无向边(u,v)转换为彼此对称的一对有向边(u,v)和(v,u)。
        因此接下来的所介绍的图的实现、图的算法都是围绕着有向图来展开的。
        
    路径：path
         π  = <V0, V1, ..., Vk>
        |π| = k
    
    简单路径：simple path
        Vi = Vj 除非i==j
        即路径中不含有重复顶点的路径。
        
    环路：cycle path
        V0 = Vk
        即路径的起点和终点是重合的顶点。
        
    简单环路：simple cycle path 
        Vi = Vj 除非i==j
        即路径中不含有重复顶点的环路。
        
    有向无环图：directed acyclic graph, also called DAG
    
    欧拉环：Eulerian cycle
        覆盖了有向图中所有的边，即所有的有向边合在一起可以构成一个环路，这样一条经过所有的有向边，而且恰好只经过一次的环路，称之为欧拉环。
        可知每个顶点在环路中出现了两次
    
    哈密尔顿环：Hamiltonian cycle
        覆盖了有向图中所有的顶点，经过每一个顶点一次，而且恰好一次的环，称之为哈密尔顿环。
    
        
表示并实现图：representation & implementation 
    图表示方法：
        邻接矩阵与关联矩阵：
            adjacency matrix：
                定义：表示顶点之间相邻关系的矩阵。
                    设G(V, E)是具有n个顶点的图，则G的邻接矩阵是具有如下性质的n阶方阵：
                        A[i][j] = 1 若边<vi, vj>或(vi,vj)∈E ///< 在有向图中，顶点对<vi,vj>是有序的，它称为从顶点vi到顶点vj的一条有向边。因此<vi,vj>与<vj,vi>是不同的两条边。
                                = 0 反之
                优点：
                    直观，易于理解和实现；
                    便于判断两个顶点之间是否有边，即根据A[i][j]=0或1来判断；   ///< O(1)时间
                    便于计算各个顶点的度；                                   ///< O(1)时间
                        对于无向图，邻接矩阵第i行元素之和就是顶点i的出度；
                        对于有向图，邻接矩阵第i行元素之和就是顶点i的出度；第i列元素之和就是顶点i的入度；
                缺点：
                    不便于增加和删除顶点；
                    不便于统计边的数目，需要扫描邻接矩阵所有元素才能统计完毕；
                    空间复杂度高，与实际边数无关；有向图需要n^2个单元存储边；无向图，采用下三角矩阵，需要n(n-1)/2个单元即可；
                    
            incidence matrix：
                
图算法：algorithm
    思路上是化繁为简。
        Graph --traversal--> spanning tree(支撑树) --traversal--> sequence
    
    始自顶点s的广度优先搜索：breadth-first search
        算法：
            访问顶点s
            依次访问s所有尚未访问的邻接顶点
            依次访问它们所有尚未访问的邻接顶点
            如此反复
            直到没有尚未访问的邻接顶点
        remark:
            将s染黑，表示它已经接受了访问
            其通往邻接顶点的边都被加粗，其邻接顶点之间的边或和一些其他边都忽略，这些边将构成原图的一个极大无环子图，通常是一棵树或者一个森林
            同树的层次遍历有异曲同工之妙，
                对于图的特例，也就是树而言，如此的breadth-first traversal就是层次遍历。
                反过来，图的广度优先遍历实际上是树的层次遍历的推广
        
    始自顶点s的深度优先搜索：depth-first search      
        算法：
            访问顶点s
            若s尚有未被访问的邻居，则任取其一u，递归执行DFS(u)
            否则，返回
            
        remark:
            将s染黑，表示它已经接受了访问
            其通往某一个邻接顶点的边都被加粗，其通往除该某一个邻接顶点的边都被忽略，其邻接顶点之间的边或和一些其他边都忽略，这些边将构成原图的一个极大无环子图，通常是一棵树或者一个森林
            同树的层次遍历有异曲同工之妙，
                对于图的特例，也就是树而言，如此的breadth-first traversal就是层次遍历。
                反过来，图的广度优先遍历实际上是树的层次遍历的推广
        
        括号引理：parenthesis lemma
            顶点活动期：active[u] = (dTime[u], fTime[u])
            给定有向图G = (V, E)及其任一DFS森林，则：
                u是v的后代  iff active[u] ⊆ active[u]       ///< iff : if and only if , 当且仅当, 等价于
                u是v的祖先  iff active[u] ⊇ active[u]
                u与v无关    iff active[u] ∩ active[u] = ∅
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
