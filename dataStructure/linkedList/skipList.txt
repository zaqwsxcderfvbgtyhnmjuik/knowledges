/// this is a topic about a link list type skipList datastructure ///
// 跳表
    跳表是一个随机化的数据结构，实质就是一种可以进行二分查找的有序链表。
	跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找。
	跳表不仅能提高搜索性能，同时也可以提高插入和删除操作的性能允许快速查询、插入和删除一个有序连续元素的数据链表。

// 跳表原理
    创建
	
    插入
	
    查找
      时间复杂度=索引高度h*每层索引遍历元素的个数k。
		高度h：即有多少层节点
			结论:同完全(满)二叉树h=⌊log2(Sn)⌋+1
				Sn是二叉树或跳表的结点的总数
			证明：
				对于满二叉树节点数为2^0+2^1+...+2^m=Sn=2^(m+1)-1;
					于是有m+1=log2(Sn+1);
					等价转换后有：
						对于，满二叉树h=⌊log2(Sn)⌋+1=m+1
						对于，完全二叉树，考虑极端情况最底层叶子节点只有一个，此时节点个数为偶数且是2^m，于是可以等价转换为h==⌊log2(Sn)⌋+1=m+1
					
					对于完全跳表节点数为n/2^0 + n/2^1 + n/2^2 +...+8+4+2+1=Sn,2^(m)=n,Sn=2^(m+1)-1,则h=log2(Sn+1),则h=m+1;
						等价转换后有：
							对于，满跳表有h=⌊log2(Sn)⌋+1=m+1
				注:以上证明无任何近似，完全严密准确，=号可以用≡号替换。
							对于，完全跳表有n/2^0 + n/2^1 + n/2^2 +...+ 2+1=Sn(n/2^i是奇数，则额外+1)，且可以等价转换为一颗完全二叉树，进而得完全跳表有h=⌊log2(Sn)⌋+1=m+1
		每层遍历数k：
			从原始数据叶子节点层每隔k个抽出第k*i（组数:i=0,1,2...）个结点作为上一级索引的结点，查找时，若第j(j=2,3...)层遍历元素超过k个，那么则可以通过k-1层索引一步就可遍历到，于是每层不可能遍历元素的个数超过k个。
			
		时间复杂度：相对于二分查找的时间复杂度较高。
                  =O(k*h)
                  =O(k*⌊log2(Sn)⌋+k)
                  =O(k)+k*O(⌊log2(Sn)⌋)
                  =k*O(⌊log2(Sn)⌋)
                  =k*O(⌊log2(Sn)⌋)
                  =k*O(m)
                  考虑第在m+1层为原始数据层节点，且第一层最高级索引的节点数为2，那么h=m，根据第m+1层原始数据层节点数为2^m=n为数据节点数，于是有：
                  =k*O(log2(n))
                  =O(log2(n))
	
    删除
	
    修改
		同查找，查找到元素后，取出来修改，再存回去即可。
    释放


// 代码思路与实现
// Skip List定义
      像下面这样（初中物理经常这样用，这里我也盗用下）：
          一个跳表，应该具有以下特征：
            a.一个跳表应该有几个层（level）组成；
            b.跳表的第一层包含所有的元素；
            c.每一层都是一个有序的链表；
            d.如果元素x出现在第i层，则所有比i小的层都包含x；
            e.第i层的元素通过一个down指针指向下一层拥有相同值的元素；
            f.在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；
            g.Top指针指向最高层的第一个元素。
// Skip List构造步骤
    1.给定一个有序的链表
    2.选择链表中最大和最小的元素，然后从其他元素中按照一定的算法(随机)选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为下一层。
    3.为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的(克隆前的自己)元素。top指针指向该层首元素。
    4.重复2、3步骤，直到不再能选择出除最大最小的元素以外的元素。
    
// 查找
    目的：在跳表中查找一个元素x
    步骤：在跳表中查找一个元素x，按照如下几个步骤进行：
        1.从最上层的链表的开头开始
        2.假设当前位置为p，它向右指向的节点为q（p与q不一定相邻），且q的值为y。将y与x作比较：
          (1)x=y 输出查询成功及相关信息
          (2)x>y 从p向右移动到q的位置
          (3)x<y 从p向下移动一格
        3.如果当前位置在最底层的原始链表中，且还要往下移动的话，则输出查询失败
// 插入
    目的：向跳表中插入一个元素x
    首先明确，向跳表中插入一个元素，相当于在表中插入一列从S0中的某一位置出发向上的连续一段元素。有两个参数需要确定，即插入列的位置以及它的"高度"。
      关于插入的位置，我们先利用跳表的查找功能，找到比x小的最大的数y。根据跳表中所有链均是 递增序列 的原则，x必然就插在y的后面。
      关于插入列的高度，较前者来说显得更加重要，也更加难以确定。由于它的不确定性，使得不同的决策可能会导致截然不同的算法效率。为了使插入数据之后，保持该数据结构进行各种操作均为O(log2(n))复杂度的性质，我们引入随机化算法（Randomized Algorithms）。
          我们定义一个随机决策模块，它的大致内容如下：
            1.产生一个0到1的随机数r：r<--random()
              如果r小于一个常数p，则执行方案A：if r < p then do A
              如果r不小于一个常数p，则执行方案B：else do B
            2.初始时，列高为1。插入元素时。不停地执行随机决策模块。如果要求执行的是A操作，则将列的高度加1，并且继续反复执行随机决策模块。直到第i次，我们结束决策，并向跳表中插入一个高度为i的列。

// 删除
    目的：从跳表中删除一个元素x
    步骤：删除的步骤分为三个
        1.在跳表中查找到这个元素的位置，如果未找到，则退出
        2.将该元素所在整列从表中删除
        3.将多余的"空链"(一层为一个链，若成了空链则删除该层，层数减少1)删除
        
// 跳表示意图
      [header]
      ↓
S2    [-1]------------→[21]-------→[37]--------------------→[1]
      ↓                ↓           ↓                        ↓    
S1    [-1]-→[7]-------→[21]-------→[37]-→[71]--------------→[1]
      ↓     ↓          ↓           ↓     ↓                  ↓
S0    [-1]-→[7]-→[14]-→[21]-→[32]-→[37]-→[71]-→[85]-→[117]-→[1]

// 定义跳表的数据结构
  // 首先是每个节点的数据结构
    typedef struct nodeStructure {
        int key;
        int value;
        struct nodeStructure* forward[1];
    }nodeStructure;
    
  // 其次是跳表的结构
    typedef struct skiplist {
        int level;
        nodeStructure* header;
    }skiplist;
    
// 定义跳表的基本操作
  // 首先是节点的创建
  nodeStructure* createNode(int level, int key, int value) {
    nodeStructure* ns = (nodeStructure*)malloc(sizeof(nodeStructure)+level*sizeof(nodeStructure*));// 共申请level+1个sizeof(nodeStructure*)字节内存块;通过nodeStructure成员数组forward[]通过下标访问。
    ns->key=key;
    ns->value=value;
    return ns;
  }
  
  // 跳表的初始化
  // 需要初始化头部，并使头部每层(根据事先定义的MAX_LEVEL)指向末尾（NULL）
  skiplist* createSkiplist() {
      skiplist* sl=(skiplist*)malloc(sizeof(skiplist));
      sl->level=0; // 跳表共有多少层
      sl->header=createNode(MAX_LEVEL-1, 0, 0);
      
      // 初始化第一列
      for (int i=0; i<MAX_LEVEL; i++) {
          sl->header->forward[i]=NULL;
      }
      
      return sl;
  }
  
  // 插入元素
  // 插入元素的时候元素所占有的层数完全是随机的，通过随机算法产生
  int randomLevel() {
      int k=1;
      while(rand()%2)
          k++;
      k=k<MAX_LEVEL ? k : MAX_LEVEL;
      
      return k;
  }
  // 跳表的插入需要三个步骤：
    // a.查找到在每层待插入的位置
    // b.随机产生一个层数
    // c. 从高层至下插入，插入时算法（）同普通链表的插入完全相同
  bool insert(skiplist* sl, int key, int value) {
      nodeStructure* update[MAX_LEVEL];
      nodeStructure *p=NULL, *q=NULL;// do not use nodeStructure *p, *q=NULL; due to using without being initialized，in release model is a random number
      
      p=sl->header;
      int k=kl->level;
      
      /// 从最高层往下查找需要插入的位置
      
      // 填充update
      for (int i=k-1; i>=0; i--) {
            while((q=p->forward[i])&&(q->key<key))
            {
                  p=q;
            } 
            update[i]=p; // p:比key小的keys中最大的一个key;
      }
      
      // 不能插入相同的key
      if(q&&q->key==key)// q:比key大的keys中最小的一个key; 
            return false;
            
      /// 产生一个随机层数K
      k=randomLevel();
      
      // 更新跳表的level
      if (k>sl->level) {
            for (int i=sl->level; i<k; i++) {
                  update[i]=sl->header;
            }
            
            sl->level=k;
      }
      
      /// 从高层至下插入
      
      // 新建一个待插入节点q
      q=createNode(k, key, value);
      
      // 逐层更新节点指针，和普通的链表插入一样
      for (int i=0; i<k; i++) {
            q->forward[i]=update[i]->forward[i];
            update[i]->forward[i]=q;
      }
      
      /// 插入成功
      return true;
  }
  
  // 删除节点:删除元素操作和插入相似
      // a.找到每层需要删除的位置
      // b.删除时和普通链表一致
      // c.需注意:如果该节点的level是最大的且该层只有该元素，则需要进行更新跳表的level
  bool deleteSL(skiplist *sl, int key) {
      nodeStructure *update[MAX_LEVEL];
      nodeStructure *p=NULL, *q=NULL;
      p=sl->header;
      
      /// 从最高层开始寻找要删除的位置
      int k=sl->level;
      for (int i=k-1; i>=0; i--) {
            while((q=p->forward[i])&&(q->key<key)) {
                  p=q;
            }
            update[i]=p;
      }
      
      /// 进行删除
      if (q&&q->key==key) {
            // 逐层删除，同普通列表一样
            for (int i=0; i<sl->level; i++) {
                  if (update[i]->forward[i]==q) {
                        update[i]->forward[i]=q->forward[i];
                  }
            }
            
            // 释放删除节点的内存
            free(q);
            
            // 如果删除的是最大层节点，那么需要重新维护跳表的层数
            for (int i=sl->level-1; i>=0; i--) {
                  if (sl->header->forward[i]==NULL) {
                        sl->level--;
                  }
            }
            
            // 删除成功
            return true; 
      }
      else {
            // skip list中未包含元素x
            return false;
      }
  }
    
  // 查找
    // 同插入的寻找插入位置相似
  int search(skiplist *sl, int key) {
      nodeStructure *p=NULL, *q=NULL;
      p=sl->header;
      
      // 从最高层开始搜索
      int k=sl->level;
      for (int i=k-1; i>=0; i--) {
            while((q=p->forward[i])&&(q->key<=key)) {
                  if (q->key==key) {
                        return q->value;
                   }
                  p->q;
            }
      }
      
      return NULL;
  }
  
  // 对比

  // 总结
  
  
  //附录
    // 完整代码
  #include<stdio.h>  
  #include<stdlib.h>  

  #define MAX_LEVEL 10 //最大层数  

  //节点  
  typedef  struct nodeStructure  
  {  
      int key;  
      int value;  
      struct nodeStructure *forward[1];  
  }nodeStructure;  

  //跳表  
  typedef  struct skiplist  
  {  
      int level;  
      nodeStructure *header;  
  }skiplist;  

  //创建节点  
  nodeStructure* createNode(int level,int key,int value)  
  {  
      nodeStructure *ns=(nodeStructure *)malloc(sizeof(nodeStructure)+level*sizeof(nodeStructure*));    
      ns->key=key;    
      ns->value=value;    
      return ns;    
  }  

  //初始化跳表  
  skiplist* createSkiplist()  
  {  
      skiplist *sl=(skiplist *)malloc(sizeof(skiplist));    
      sl->level=0;    
      sl->header=createNode(MAX_LEVEL-1,0,0);    
      for(int i=0;i<MAX_LEVEL;i++)    
      {    
          sl->header->forward[i]=NULL;    
      }  
      return sl;  
  }  

  //随机产生层数  
  int randomLevel()    
  {  
      int k=1;  
      while (rand()%2)    
          k++;    
      k=(k<MAX_LEVEL)?k:MAX_LEVEL;  
      return k;    
  }  

  //插入节点  
  bool insert(skiplist *sl,int key,int value)  
  {  
      nodeStructure *update[MAX_LEVEL];  
      nodeStructure *p, *q = NULL;  
      p=sl->header;  
      int k=sl->level;  
      //从最高层往下查找需要插入的位置  
      //填充update  
      for(int i=k-1; i >= 0; i--){  
          while((q=p->forward[i])&&(q->key<key))  
          {  
              p=q;  
          }  
          update[i]=p;  
      }  
      //不能插入相同的key  
      if(q&&q->key==key)  
      {  
          return false;  
      }  

      //产生一个随机层数K  
      //新建一个待插入节点q  
      //一层一层插入  
      k=randomLevel();  
      //更新跳表的level  
      if(k>(sl->level))  
      {  
          for(int i=sl->level; i < k; i++){  
              update[i] = sl->header;  
          }  
          sl->level=k;  
      }  

      q=createNode(k,key,value);  
      //逐层更新节点的指针，和普通列表插入一样  
      for(int i=0;i<k;i++)  
      {  
          q->forward[i]=update[i]->forward[i];  
          update[i]->forward[i]=q;  
      }  
      return true;  
  }  

  //搜索指定key的value  
  int search(skiplist *sl,int key)  
  {  
      nodeStructure *p,*q=NULL;  
      p=sl->header;  
      //从最高层开始搜  
      int k=sl->level;  
      for(int i=k-1; i >= 0; i--){  
          while((q=p->forward[i])&&(q->key<=key))  
          {  
              if(q->key == key)  
              {  
                  return q->value;  
              }  
              p=q;  
          }  
      }  
      return NULL;  
  }  

  //删除指定的key  
  bool deleteSL(skiplist *sl,int key)  
  {  
      nodeStructure *update[MAX_LEVEL];  
      nodeStructure *p,*q=NULL;  
      p=sl->header;  
      //从最高层开始搜  
      int k=sl->level;  
      for(int i=k-1; i >= 0; i--){  
          while((q=p->forward[i])&&(q->key<key))  
          {  
              p=q;  
          }  
          update[i]=p;  
      }  
      if(q&&q->key==key)  
      {  
          //逐层删除，和普通列表删除一样  
          for(int i=0; i<sl->level; i++){    
              if(update[i]->forward[i]==q){    
                  update[i]->forward[i]=q->forward[i];    
              }  
          }   
          free(q);  
          //如果删除的是最大层的节点，那么需要重新维护跳表的  
          for(int i=sl->level - 1; i >= 0; i--){    
              if(sl->header->forward[i]==NULL){    
                  sl->level--;    
              }    
          }    
          return true;  
      }  
      else  
          return false;  
  }  
  
  // 打印跳表
  void printSL(skiplist *sl)  
  {  
      //从最高层开始打印  
      nodeStructure *p,*q=NULL;  

      //从最高层开始搜  
      int k=sl->level;  
      for(int i=k-1; i >= 0; i--)  
      {  
          p=sl->header;  
          while(q=p->forward[i])  
          {  
              printf("%d -> ",p->value);  
              p=q;  
          }  
          printf("\n");  
      }  
      printf("\n");  
  }  
  
  // 测试跳表
  int main()  
  {  
      skiplist *sl=createSkiplist();  
      for(int i=1;i<=19;i++)  
      {  
          insert(sl,i,i*2);  
      }  
      printSL(sl);  
      //搜索  
      int i=search(sl,4);  
      printf("i=%d\n",i);  
      //删除  
      bool b=deleteSL(sl,4);  
      if(b)  
          printf("删除成功\n");  
      printSL(sl);  
      system("pause");  
      return 0;  
  }  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    
    


    
          
