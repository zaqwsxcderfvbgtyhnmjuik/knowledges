/// this is a topic about B tree，full name called balanced tree ///
    背景 
        从严格意义上讲，B树并不是一棵二分查找树，很快会看到，在物理上，B树的每一个节点都可能包含多个分支；
        从逻辑意义上讲，B树依然等效于之前所介绍的二分查找树BST，因此归类于高级搜索树；
    动机
        B树最初最主要的功能在于 弥合 不同存储级别之间在访问速度上的巨大差异，也就是实现高效的I/O。
        640K ought to be enough for anybody 
                                        - B. Gates, 1981
    越来越小的内存
        系统存储容量的增长速度 << 应用问题规模的增长速度
            亦即，绝对而言，内存的容量是在不断增大；相对而言，内存的容量是在不断减小
        为什么不把内存做得更大？
            物理上，存储器的容量大/小，访问速度就慢/快
    
    高速缓存
        事实1：不同容量的存储器，访问速度差异悬殊；
            a)以磁盘与内存为例：ms/ns > 10^5
                亦即，一次内存访问需要一秒，则一次外存访问就相当于一天；
            b)为避免1次外存访问，我们宁愿访问内存10次，100次，甚至...
            c)多数存储系统，都是分级组织的————Caching
                最常用的数据尽可能放在更高层、更小的存储器中；
                实在找不到，才向更低层、更大的存储器索取；
                如：CPU RAM <=I/O=> DISK ARRAY
                    需尽可能减少磁盘IO次数
        事实2：从磁盘中读写1B，与读写1KB几乎一样快；
            批量式访问：以页（page）或块（block）为单位，使用缓冲区的；
                如RAM <= pages => DISK
                
    B树结构
        每个节点有多个分支；
        所有底层节点的深度是完全一致的，是理想平衡的搜索树；
        相对于二叉排序树，B树更宽更矮；
        插入/删除会进行拓扑结构调整；
    
    多路平衡
        1970, R. Bayer & E. McCreight 定义B树为平衡的多路（multi-way）搜索树；
        若干个二路节点搜索树节点，经适当合并，得超级节点：
            每两代合并：4路分支，4-1个关键码（双亲节点+左右孩子节点共三个关键码）
            每三代合并：8路分支，8-1个关键码
            ...
            每d代合并：m = 2^d路分支, m-1个关键码
            如下图：共5个超级节点，每个超级节点4路分支（4个出度），3个关键码
                                *                      <=转换前|转换后=>           * * *            
                              *   *                             
                  *       *           *        *                        * * *  * * *  * * *  * * * *
                *   *   *   *       *   *    *   *  
    引入B树的原因
        逻辑上与BBST完全等价，为何还要引入B树呢？
            多级存储系统中使用B树，可针对外部查找，大大减少I/O次数
        难道，AVL树还不够？若有n=1G个记录存储于外存，对其构建AVL搜索树
            每次查找需要 log2(10^9) = 30次I/O操作，每次操作只读出一个关键码，得不偿失
        B树又如何？
            充分利用外存对批量访问的高效支持，将此特点转化为优点
            每下降一层，都以超级节点为单位，读入一组关键码
        具体多大一组？视磁盘的数据块大小而定，m = keys / page_size
            比如，目前多数数据库系统采用m=200~300
        回到上例，若取m=256，则每次查找只需log256(10^9)=4次 I/O
    
    B树定义
        深度统一 ：
            m阶B树，即m路平衡搜索树（m>=2）
            叶子节点 的深度同一相等
            外部节点 的深度同一相等
            树高h = 外部节点的深度
        阶次含义：
            内部节点各有：
                不超过m-1个关键码: K1 < k2 < ... < kn
                不超过m个分支:A0 < A1 < A2 < ... < An
            内部节点的分支数n+1也不能太少，具体地：
                树根：  2  <= n + 1 ; 即根节点至少有两个分支
                其余：⌈m/2⌉ <= n + 1
            故亦称作(⌈m/2⌉, m)树，
                如(4, 8)树，(4, 7)树，(3, 6)树，(2, 4)树
                (2, 4)树与红黑树密切联系
        总结：
                        分支最小数   分支最大数   |   节点最小数   节点最大数
            根节点       2           m               2-1         m-1                
            内部节点     ⌈m/2⌉        m               ⌈m/2⌉-1      m-1
        remark：
            1)根节点至少1个关键码，空节点不能是B树根节点；而内部节点至少0个关键码，即空节点；
            2)m最小可以是2，以分支数范围表示B树，此时是(1, 2)树；内部节点的关键码数范围：[0, 1]；是一颗CBT(complete binary tree)
    B树实现：
        节点定义：
            template <typename T> struct BTNode { // B树节点
                BTNodePosi<T> parent; // 父
                vector<T> key; // 数值向量
                vector<BTNodePosi<T> > child; // 孩子向量（其长度总比key多1）
                BTNode() :parent(NULL) {child.insert(0, NULL);}
                BTNode(T e, BTNodePosi<T> lc = NULL, BTNodePosi<T> rc = NULL)  {
                    parent = NULL; key.insert ( e ); //作为根节点只有一个关键码，以及
                    child.insert ( lc ); if ( lc ) lc->parent = this; //左孩子
                    child.insert ( rc ); if ( rc ) rc->parent = this; //右孩子
                }
        B树定义：            
            template <typename T> class BTree { //B-树模板类
            protected:
               int _size; //存放的关键码总数
               int _m; //B-树的阶次，至少为3——创建时指定，一般不能修改
               BTNodePosi<T> _root; //根节点
               BTNodePosi<T> _hot; //BTree::search()最后访问的非空（除非树空）的节点位置
               void solveOverflow ( BTNodePosi<T> ); //因插入而上溢之后的分裂处理
               void solveUnderflow ( BTNodePosi<T> ); //因删除而下溢之后的合并处理
            public:
               BTree ( int m = 3 ) : _m ( m ), _size ( 0 ) //构造函数：默认为最低的3阶
               { _root = new BTNode<T>(); }
               ~BTree() { if ( _root ) release ( _root ); } //析构函数：释放所有节点
               int const order() { return _m; } //阶次
               int const size() { return _size; } //规模
               BTNodePosi<T> & root() { return _root; } //树根
               bool empty() const { return !_root; } //判空
               BTNodePosi<T> search ( const T& e ); //查找
               bool insert ( const T& e ); //插入
               bool remove ( const T& e ); //删除
            }; //BTree
    
    B树操作：
        查找：静态操作
            B树存放的词条（包含key和value）的数量极多，以至于不便完全容纳于内存中，甚至根本不能由内存容纳；假定存储于速度更慢的外存中。
            查找诀窍：只载入必需的节点到内存中，尽可能减少I/O操作
            步骤：
                1)从外存中磁盘IO读入B树根节点，节点内部顺序查找，查找成功返回，查找失败后，磁盘IO通过引用读取下一层的某个节点，继续查找，成功返回，直到下一个节点是外部节点，则查找以失败告终；
                2)失败查找必终止于外部节点。
            复杂度：
                主次成本：
                    逐层深入不断减而治之的过程；
                    每一个层次上至多只会涉及到一个节点；
                    主要成本：树的高度h，每一个节点进行一次IO操作；
                    次要成本：每一个节点内的顺序查找
                树的高度：B树的高度由其外部节点的高度决定,第0层的B树树根节点高度是0，外部结点的高度为h，即B树高；
                    最大树高：
                        含有N个关键码的m阶B树，最大高度求证
                            内部节点应尽可能的"瘦"，各层节点数依次为：
                                n0 = 1, n1 = 2(根节点特权), n2 = 2 * ⌈m/2⌉
                                nk = 2 * ⌈m/2⌉^(k-1)
                            考查外部节点所在层：N个关键码(内部节点)的B树的外部节点个数是N+1
                                N+1 = nh(k == h时) >= 2 * ⌈m/2⌉^(h-1)
                                整理得：
                                h <= 1 + log⌈m/2⌉(⌊(N+1)/2⌋) = O( logm(N) )
                            相对于BBST：m的取值的意义如下
                                log⌈m/2⌉(N/2) / log2(N) = 1 / ( log2(m) - 1 )
                                若取m=256，树高（I/O次数）约降至1/7
                    最小树高：
                         含有N个关键码的m阶B树，最小高度求证
                            内部节点应尽可能的"胖"，各层节点数依次为：
                                n0 = 1, n1 = m, n2 = m^2, ... , nk = m^k, ... , nh = m^h
                         考查外部节点所在层：N个关键码(内部节点)的B树的外部节点个数是N+1
                            N+1 = nh(k == h时) <= m^h
                            整理得：
                            h >= logm( N+1 ) = O( logm(N) )
                        相对于BBST：m的取值的意义如下
                            (logm(N) - 1) / log2(N) = logm(2) - logN(2) ≈ 1/log2(m)
                            若取m=256，树高（I/O次数）约降至1/8
                    在内部节点总数固定的情况下，B树的高度变化幅度不大。
        插入：动态操作
            步骤：
                查找插入的关键码e，确认e不存在
                在要插入关键码e的叶子节点_hot中查找e，确定插入的位置
                将新的关键码e插入到_hot节点 数值向量 的对应位置
                在 孩子向量 的对应位置插入一棵空子树
                如果发生上溢，需做分裂处理
            上溢：
                概念：
                    因为新关键码的引入而导致所属节点的分支数（m+1）超过B树阶次m的情况，称作上溢(overflow)情况。
                分裂：
                    设上溢节点中的关键码（数量一定是m个，因其分支数是m+1个而得）依次是k0, k1, ... , km-1
                    取中位数s = ⌊m/2⌋，即关键码序列中的下标为⌊m/2⌋，以ks为界限划分为：
                        k0, k1, ... , ks , ... , km-1
                    关键码ks上升一层，并
                        分裂split以所得的两个节点作为左、右孩子
                再分裂：
                    若上溢节点的父亲本已饱和，则在接纳被提升的关键码ks之后，也将上溢，此时，大可套用前法，继续分裂；
                    上溢可能持续发生，并逐层向上传播；纵然最坏情况，亦不过到根节点而已哈哈
                根节点分裂：
                    假设经过若干次传播之后，最终在B树的根节点处也发生了上溢；
                    依然以中位数s为界，将原来的根节点一分为二(节点ks不包括在一分为二的二中)，试图将中位数关键码节点向上转交给父节点；
                    然而此时作为根节点，其父节点不存在，在这种情况下，让提升的中位数关键码节点独自成为一个节点，也就是说它将成为这棵B树新的根节点。
                    因此整棵B树的高度也会随之增加一层，这也是导致B树增高的唯一情况。
                    请注意，在B树刚刚长高的这个时刻，新的根节点只拥有两个分支，无论B树的阶次m是多少。这就是根节点的特权，分支数少于⌈m/2⌉，可以为2，也是必须的。
                分裂复杂度：
                    O(1) * h = O(h)
                    
        删除：动态操作
            步骤：
                确认删除的关键码e存在；
                在要删除关键码e的节点v中查找e，确定删除的位置
                若节点v非叶子节点，则在右子树中一直向左，即可找到关键码e的后继关键码（必属于某个叶子节点u中）
                节点v与某叶子节点u进行关键码交换；
                随后u删除关键码，及关键码的右子树
            下溢：
                旋转：左顾右盼（优先）
                    节点v下溢时，必恰好包含⌈m/2⌉-2个关键码 + ⌈m/2⌉-1个分支；
                    不失去一般性，假设节点v的左兄弟LBrother含有至少⌈m/2⌉个关键码，v向LBrother借出一个关键码后，可以解决节点v的下溢问题，同时也不至于让LBrother发生下溢。
                    有一点小小的难题：作为搜索树，B树同样应该符合中序遍历意义上的顺序性
                        将LBrother的任一个关键码移送到v中，都将破坏这一局部乃至全局的顺序性，这是万万不可的；
                        v节点向父节点中借入关键码yKey，v节点的父节点向v节点的左兄弟LBrother借入其最大（升序最右侧的那个）的关键码xKey；
                        至此，经过"旋转"，下溢修复完成。
                合并：
                    v节点的左右兄弟节点LBrother和RBrother或者不存在，或者所含关键码均不足⌈m/2⌉个。
                        注意：LBrother和RBrother节点仍必有其一，且恰含⌈m/2⌉-1个关键码（不妨以L为例子）
                        疑问：若根节点只有一个关键码，并且删除的就是该关键码呢？
                    从父节点中将分割的关键码yKey取出来，作为粘合剂，将节点v和其左兄弟LBrother节点合并起来，成为一个新的节点（关键码总数不超过m-1）。
                再合并：
                    若v的父节点因此下溢，则如法炮制（先试旋转+再试合并）。
                    这也是B树高度下降的唯一可能，即合并的新节点顶替根节点，成为新的根节点，需释放原来的根节点。
                分裂复杂度：
                    O(1) * h = O(h)
                
            
    B树总结：
        每一次 水平内存操作都对应一次 垂直外存操作，为了使操作的高效性，应当使内存操作和外存操作的时间相当；即让B树的形态比较矮胖宽。
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
        
            
