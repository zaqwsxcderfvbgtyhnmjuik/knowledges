/// this is a topic about B tree，full name called balanced tree ///
    背景 
        从严格意义上讲，B树并不是一棵二分查找树，很快会看到，在物理上，B树的每一个节点都可能包含多个分支；
        从逻辑意义上讲，B树依然等效于之前所介绍的二分查找树BST，因此归类于高级搜索树；
    动机
        B树最初最主要的功能在于 弥合 不同存储级别之间在访问速度上的巨大差异，也就是实现高效的I/O。
        640K ought to be enough for anybody 
                                        - B. Gates, 1981
    越来越小的内存
        系统存储容量的增长速度 << 应用问题规模的增长速度
            亦即，绝对而言，内存的容量是在不断增大；相对而言，内存的容量是在不断减小
        为什么不把内存做得更大？
            物理上，存储器的容量大/小，访问速度就慢/快
    
    高速缓存
        事实1：不同容量的存储器，访问速度差异悬殊；
            a)以磁盘与内存为例：ms/ns > 10^5
                亦即，一次内存访问需要一秒，则一次外存访问就相当于一天；
            b)为避免1次外存访问，我们宁愿访问内存10次，100次，甚至...
            c)多数存储系统，都是分级组织的————Caching
                最常用的数据尽可能放在更高层、更小的存储器中；
                实在找不到，才向更低层、更大的存储器索取；
                如：CPU RAM <=I/O=> DISK ARRAY
                    需尽可能减少磁盘IO次数
        事实2：从磁盘中读写1B，与读写1KB几乎一样快；
            批量式访问：以页（page）或块（block）为单位，使用缓冲区的；
                如RAM <= pages => DISK
                
    B树结构
        每个节点有多个分支；
        所有底层节点的深度是完全一致的，是理想平衡的搜索树；
        相对于二叉排序树，B树更宽更矮；
        插入/删除会进行拓扑结构调整；
    
    多路平衡
        1970, R. Bayer & E. McCreight 定义B树为平衡的多路（multi-way）搜索树；
        若干个二路节点搜索树节点，经适当合并，得超级节点：
            每两代合并：4路分支，4-1个关键码（双亲节点+左右孩子节点共三个关键码）
            每三代合并：8路分支，8-1个关键码
            ...
            每d代合并：m = 2^d路分支, m-1个关键码
            如下图：共5个超级节点，每个超级节点4路分支（4个出度），3个关键码
                                *                      <=转换前|转换后=>           * * *            
                              *   *                             
                  *       *           *        *                        * * *  * * *  * * *  * * * *
                *   *   *   *       *   *    *   *  
    引入B树的原因
        逻辑上与BBST完全等价，为何还要引入B树呢？
            多级存储系统中使用B树，可针对外部查找，大大减少I/O次数
        难道，AVL树还不够？若有n=1G个记录存储于外存，对其构建AVL搜索树
            每次查找需要 log2(10^9) = 30次I/O操作，每次操作只读出一个关键码，得不偿失
        B树又如何？
            充分利用外存对批量访问的高效支持，将此特点转化为优点
            每下降一层，都以超级节点为单位，读入一组关键码
        具体多大一组？视磁盘的数据块大小而定，m = keys / page_size
            比如，目前多数数据库系统采用m=200~300
        回到上例，若取m=256，则每次查找只需log256(10^9)=4次 I/O
    
    B树定义
        m阶B树，即m路平衡搜索树（m>=2）
        叶子节点的深度同一相等
        外部节点的深度同一相等
        树高h = 外部节点的深度
        
            
