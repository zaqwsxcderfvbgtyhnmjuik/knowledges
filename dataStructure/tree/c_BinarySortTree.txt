/// this is a topic about query of tree table

// 背景
    线性表的查找方式有线性查找，二分查找，区间查找等方式，当线性表插入、删除操作频繁时，为维护线性表的有序性，需要移动表中很多记录。
        只作"查询"(检索)操作的查找表，定义为静态查找表。
    进而改用动态查找表——在静态查找表的基础上，作"插入"、"删除"操作的查找表，即树表——几种特殊的树
        表结构在查找的过程中动态生成：对于给定的key,若表中存在，则成功返回；否则，插入关键字等于key的记录
    关系图：  
            BBST
             ↑
            BST       ←         Binary Tree
             ↑                   ↑
            Vector(sorted)      List
  
// 二叉排序树(alias:二叉搜索树或二叉查找树):Binary sort tree
    // 定义：
        二叉排序树或是空树，或是满足如下性质的树：
          a)若其左 子树 非空，则左子树上所有结点的值均 小于     根结点的值；
              归纳可得，等价于每个结点的左 孩子 小于 结点值；
          b)若其右子树非空，则右子树上所有结点的值均 大于等于 根结点的值；
              归纳可得，等价于每个结点的右 孩子 大于等于 结点值；
          c)其左右子树本身又是一颗二叉排序树<==>嵌套定义
    // 特点
        循关键码访问(call by key)
            定义：数据项之间，依照各自的关键码彼此区分；
            条件：关键码之间支持 大小比较 与 相等比对；
            约束：数据集合中的数据项，统一的表示和实现为词条entry形式,如下：
                template<typename K, typename V> struct Entry { // 词条模板类
                    K key; V value; // 关键码、数值
                    Entry( K k = K(), V v = V() ) : key(k), value(v) {} // 默认构造函数
                    Entry( Entry<K, V> const& e) : key(e.k), value(e.v) {} // 拷贝构造函数
                    // 比较器、判断器（从此，不必严格区分词条及其对应的关键码）
                    bool operator < (Entry<K, V> const& e) {return this->key < e.key; } // 小于
                    bool operator > (Entry<K, V> const& e) {return this->key > e.key; } // 大于
                    bool operator == (Entry<K, V> const& e) {return this->key == e.key; } // 等于
                    bool operator != (Entry<K, V> const& e) {return this->key != e.key; } // 不等于
                };
        顺序性
            定义：
                Binary search tree，简称BST；节点 ~ 词条 ~ 关键码等价;
                任一节点均不小于/不大于其左/右后代;
                等效为：
                    任一节点均不小于/不大于其左/右孩子;
                为简明起见，禁止重复词条；不小于可替换为大于，不大于可以替换为小于
                    这种简化应用中不自然，算法上无必要
            单调性：
                顺序性虽然只是对局部特征的刻画，但由此可以导出某种全局特征
                BST的中序遍历序列，必然单调非降。
                    将一颗BST垂直投影即可得其中序遍历序列；
                这一性质，也是BST的充要条件
    // 性质
        二叉排序树中序遍历序列是递增(不是严格递增)有序序列。
        全局单调性，局部有序性
        
    // 存储结构
        typedef struct {
            KeyType key;// 记录关键字项
            InfoType otherinfo;// 记录数据项
        }ElemType;
        
        typedef struct BSTNode {
            ElemType data;  // 数据域
            struct BSTNode *lchild, *rchild; // 左右孩子指针
        }NSTNode, *BSTree;
        
    // 操作
        查找：转换为迭代后效率更高！
          算法思路："减而治之"，从根节点出发，逐步地缩小查找范围，直到发现目标（成功），或查找范围缩小至空树（失败）
            若二叉排序树为空，则查找失败，返回空指针（根结点地址）
            若二叉排序树非空，将给定值key与根结点的关键字T->data.key进行比较：
              a.若key等于T->data.key，则查找成功，返回根结点地址；
              b.若key小于T->data.key；则进一步查找左子树
              c.若key大于T->data.key；则进一步查找右子树
          
          算法描述：
            BSTree SearchBST(BSTree T, KeyType key) {
                if ( T==NULL )
                    return NULL;
                if ( key==T->data.key )
                    return T;
                    
                if ( key < T->data.key )
                    return SearchBST(T->lchild, key);
                if ( key > T->data.key ) // 同算法思路保持一致
                    return SearchBST(T->rchild, key);
            }
           算法分析：
              1)含有n个结点的二叉排序树的 平均查找长度(ASL) 和 树的形态有关
                最好情况：形态比较均衡，树的深度为⌈log2(n)⌉，平均查找长度(ASL)=log2(n+1)-1;同二分查找中的判定树相同，记为O( log2(n) )// ASL还未进行推导
                最坏情况：单支树的形态，树的深度为n，平均查找长度(ASL)=(n+1)/2;同顺序查找相同，记为O( n )// ASL还未进行推导,但好推导
              2)问题：如何提高形态不均衡的二叉排序树的查找效率？
                解决办法：做"平衡化"处理，即尽量让二叉树的形状均衡
        插入：
          算法思路：
            若二叉排序树为空，则插入结点作为根结点插入到空树中
            若二叉排序树非空，进行查找左右子树：
              a.若key等于T->data.key，则不再插入；
              b.若key小于T->data.key；则进一步查找左子树
              c.若key大于T->data.key；则进一步查找右子树
          
          算法描述：
            void InsertBST(BSTree T, NSTNode &newNode) {
                if ( T==NULL )
                    T = new NSTNode(newNode); // 得自己new，外界传入的newNode由外界管理释放等
                if ( &newNode->data.key==T->data.key )
                    return; // 已经插入，不再插入
                    
                if ( key < T->data.key )
                    return InsertBST(T->lchild, newNode);
                if ( key > T->data.key ) // 同算法思路保持一致
                    return InsertBST(T->rchild, newNode);
            }
            
          算法分析：
            1)插入的结点一定是在叶子结点上，无需移动其他记录；
            2)二叉排序树的生成，从空树出发，经过一序列插入操作之后，可生成一颗二叉排序树；
              a.一个无序序列通过生成二叉排序树而变成一个有序序列，其生成过程就是对无序序列进行排序的过程；
              b.关键字的输入顺序不同，建立的不同二叉排序树(百分之百不同)；
              
          
        删除：
          要求：
            1)保证删除后所得的二叉树仍然满足二叉排序树的性质不变；
              a)将因删除结点而断开的二叉链表重新链接起来
              b)防止重新链接后树的高度增加
              
          算法思路：
            情况0：被删除的结点DelNode未在树中，直接删除失败
            情况1：被删除的结点DelNode是叶子结点，则直接删去该结点；
            情况2：被删除的结点DelNode只有左子树或者只有右子树，则用其左子树或右子树替换它（结点替换）
            情况3：被删除的结点DelNode既有左子树又有右子树，则
                    a)以DelNode中序前驱结点值交换(值互换)，然后再删除该前驱结点(删除的情景是不可能为情况3，于是情况3不可能递归)。前驱结点是左子树中值最大的结点；
                        DelNode的前驱结点查找：前驱结点是左子树中值最大的结点，即从左子树根节点出发，一直找到最右侧结点，就是左子树中值最大结点；
                          参考后继结点。
                        DelNode的前驱结点删除：
                          参考后继结点。
                    b)以DelNode中序后继结点值交换(值互换)，然后再删除该后继结点(删除的情景是不可能为情况3，于是情况3不可能递归)。后继结点是右子树(一定存在右子树)中值最小的结点；
                        DelNode的后继结点查找：
                          后继结点是右子树中值最小的结点，刚开始处，subsequentNode是DelNode->rchild，subsequentNodeParent是DelNode，接着subsequentNode一直找到最左侧结点，并记录subsequentNodeParent，就得到右子树中值最小结点，即DelNode后继结点；
                        DelNode的后继结点删除：
                          若subsequentNodeParent==DelNode，则subsequentNodeParent->rchild = subsequentNode->rchild，否则subsequentNodeParent->lchild = subsequentNode->rchild。接着释放DelNode后继结点subsequentNode即可。
          算法描述：
            bool EraseBST(BSTree& T, KeyType key) { // 传入的指针是引用是关键，删除叶子结点等时，可以对应将父节点相应的孩子指针置为空
                if ( T==NULL ) // case0
                    return false;
                    
                if ( key==T->data.key ) {// key is found 
                    if ( T->lchild==NULL && T->rchild==NULL ) { // case1
                        delete T;
                        T = NULL;
                        return true;
                        }

                    if (T->lchild!=NULL && T->rchild==NULL) { // case2
                        BSTree Nodedrop = T;                        
                        T = T->lchild;
                        delete Nodedrop; Nodedrop = NULL;
                        return true;
                        }

                    if (T->lchild==NULL && T->rchild!=NULL) { // case2
                        BSTree Nodedrop = T;
                        T = T->rchild;
                        delete Nodedrop; Nodedrop = NULL;
                        return true;
                        }

                    if (T->lchild!=NULL && T->rchild!=NULL) { // case3
                        // look the subsequent node(后继结点) in middle order and its parent                                                
                        BSTree subsequentNode = T->rchild; ///< subsequent at the beginning 
                        BSTree subsequentNodePareant = T;
                        
                        while ( subsequentNode&&subsequentNode->lchild ) {
                            subsequentNodePareant = subsequentNode;
                            subsequentNode = subsequentNode->lchild;
                            }

                        // swap rightSubTreeLeftestNode->data and T->data
                        ElemType temp = T->data;
                        T->data = subsequentNode->data;
                        subsequentNode->data = temp;

                        // delete rightSubTreeLeftestNode with case2 or case1
                        ( subsequentNodePareant==T ? subsequentNodePareant->rchild : subsequentNodePareant->lchild) = subsequentNode->rchild ;
                        
                        delete subsequentNode;
                        subsequentNode = NULL;

                        return true;
                        }
                    }
                    
                // key is still in query processing
                if ( key < T->data.key )
                    return EraseBST(T->lchild, key);
                if ( key > T->data.key ) // 同算法思路保持一致
                    return EraseBST(T->rchild, key);
            }
          
          算法分析：
            情况3的删除有可能降低二叉排序树的高度，但不会增加树的高度；
            BST变种颇多，此文只是一种实现，不要局限于此
            
    // 性能分析
        最坏情况：
            BST如果是单支树，则静态动态操作的时间复杂度退化为O(n);
                单支树来源于对有序序列构建的BST，升序则构建为右单支树，反之是左单支树；
        平均情况：O(√n)更为可信
            随机生成：
                对关键码序列x1,x2,...,xn的全排列有n!个序列，构建n!个BST，算其平均高度是log2(n)
            随机组成：
                最随机生成的基础上，BST拓补结构相同的只保留一棵，即catalan树，共有catalan(n)棵树,算其平均高度是O(√n)
        解决办法：
            理想平衡：
                节点数目固定时，兄弟子树高度越接近（平衡），全树高度也将倾向于更低；
                有n个节点组成的二叉树，高度不低于⌊log2(n)⌋———恰为⌊log2(n)⌋时，此时是完全二叉树或满二叉树，称作理想平衡(可能性非常低，实际意义不大)；
            适度平衡：
                高度渐进地不超过O(logn),即可称为适度平衡
                适度平衡的BST，称作平衡二叉搜索树（BBST）
    // 等价BST
        上下可变：联接关系不尽相同，承袭关系可能颠倒；16和19承袭关系颠倒
        左右不乱：中序遍历序列完全一致，全局单调非降；中序序列均是13, 16, 19
        如：
        BST_1           BST_2
               19           16
        13              13      19
            16
    // 等价变换与旋转调整
        变换原则：
            
        顺时针旋转zig：
            步骤：
            
            如：结点V顺时针旋转
            zig(v)              ==>    zigged
                        V                   C
                C            Z          X           V
            X       Y                           Y       Z
        逆时针旋转zag：
            步骤：
                
            如：结点V逆时针旋转
            zagged                      zag(v)
                        C       <==         V   
                V           Z           X           C
            X       Y                           Y       Z
