       
// 1.线索二叉树
    提出问题：
        如何寻找二叉链表二叉树特定遍历序列中二叉树结点的前驱和后继？？？
    解决方法：
        1.通过再遍历一次寻找——费时间；
        2.再增设前驱、后继指针域，比如三叉链表——增加了存储的负担
        3.利用二叉链表中的空指针于——√√√
        
    回顾：
        n个结点的二叉链表二叉树中空指针域的数量：n+1个
            证明：
                共n个结点，每个结点2个指针域，所以指针域共有2n个；
                从叶子结点往根结点反向看，除根节点外每个结点都有唯一的一个双亲结点指针域，即全部非空指针域，共有n-1个
                于是空指针域就有Empty = 2n - ( n - 1 ) = n + 1;
            
    定义：
        利用二叉链表二叉树中的空指针域，按照某种遍历序列来确定某个结点在遍历序列中的前驱结点和后继结点，
        如果某个结点的左孩子为空，则将空的左孩子指针域改为指向其前驱结点（由遍历序列确定）；
        如果某个结点的右孩子为空，则将空的右孩子指针域改为指向其后继结点（由遍历序列确定）；
        若无对应的前驱结点或后继结点，则继续空着（如遍历序列中第一个结点和最后一个结点）。
        ——这种改变指向的指针称为"线索"。
        
        加上了线索的二叉链表二叉树称为"线索二叉树"（threaded binary tree）
        
        对二叉链表二叉树按照某种遍历次序使其变为线索二叉树的过程叫"线索化"。
    
    存储结构：线索二叉树的结点
        为了区分lchild,rchild指针到底是指向孩子的指针，还是指向前驱或后继的指针，对二叉链表中每个结点增设两个标志域ltag和rtag，并约定：
            ltag==0 lchild指向该结点的左孩子
            ltag==1 lchild指向该结点的前驱
            rtag==0 rchild指向该结点的右孩子
            rtag==1 rchild指向该结点的后继
        则表示如下：    
        typedef struct BiThreadedNode {
            elemType data;
            int ltag, rtag; 
            struct BiNode *lchild, *rchild;// 左右孩子指针
        }BiThrNode, *BiThrTree;// Threaded trinary tree 
    
    完善定义：
        根据定义每棵线索二叉树都有 遍历序列中的第一个结点的左指针悬空， 遍历序列中的倒数第一个结点的右指针悬空，为了完善某遍历序列线索二叉链表二叉树的定义，
        增设一个头结点：
            data域为空；
            ltag=0,lchild指向根节点；
            rtag=1,rchild指向遍历序列中倒数第一个结点
        此时，遍历序列中的第一个结点的悬空左指针， 遍历序列中的倒数第一个结点的悬空右指针，都指向头结点；
        同时第一个结点的左指针对应的的ltag置为1，倒数第一个结点的右指针对应的的rtag置为1。
        
    建立
        要求：中序遍历线索二叉链表二叉树线索化
        算法思路：
            第一步：创建二叉树
                先序完整序列建立二叉树
                    空节点使用#表示
                如果是ch==#字符，当前结点置为NULL，并返回
                否则
                    创建新的结点，并进行赋值ch初始化
                    递归创建左子树；
                    递归创建右子树；
                    
            第二步：中序线索化二叉树
                如果是空树，则返回
                否则
                    递归线索化左子树
                    当前结点左指针检测为空，则当前结点左指针指向其前驱结点，若前驱结点为空，指向头结点(算法实现中忽略该步骤)，并置ltag为1；
                        补充：
                            中序遍历，遍历到当前结点时，其前驱结点，必然可当下访问到；
                    前一结点右指针检测为空，则前一结点右指针指向其后继结点，若后继结点为空，指向头结点(算法实现中忽略该步骤)，并置rtag为1；
                        补充：
                            中序遍历，遍历到当前结点时，其后继结点，必然不可当下访问到；因为还没遍历到；于是采用前一结点的右指针为空进行判断，
                                其后继结点必然可当下访问到；
                    当前结点赋值给前一节点;
                    递归线索化右子树
        算法实现：
            // 第一步：先序序列创建二叉树
            void CreateBiTree(BiTree T) {
                // 访问结点
                char ch = '#';
                scanf("%c", &ch);
                if ( ch=='#' ) {
                    T = NULL;
                    return;
                }
                
                T = new BiNode();
                T->data = ch;
                
                // 递归构建左子树
                CreateBiTree(T->lchild);
                
                // 递归构建右子树
                CreateBiTree(T->rchild);
            }
            
            // 第二步：中序线索化
            void midInThread(BiThrTree T, BiThrTree &preT) {
                if ( T==NULL ) return;
                
                midInThread ( T->lchild, preT );
                // 访问操作
                if ( T->lchild==NULL ) { ///< 检测当前结点左指针为空
                    T->lchild = preT;
                    T->ltag   = 1;
                }
                if ( preT!=NULL && preT->rchild==NULL ) { // 检测前一结点的右指针为空
                    preT->rchild = T;
                    preT->rtag   = 1;
                }
                preT = T;
                midInThread ( T->rchild, preT );
                
                }
            同理可以给出前序遍历线索二叉链表二叉树线索化算法实现：
            void preInThread(BiThrTree T, BiThrTree &preT) {
                if ( T==NULL ) return;
                
                // 访问操作
                if ( T->lchild==NULL ) { ///< 检测当前结点左指针为空
                    T->lchild = preT;
                    T->ltag   = 1;
                }
                if ( preT!=NULL && preT->rchild==NULL ) { ///< 检测前一结点的右指针为空
                    preT->rchild = T;
                    preT->rtag   = 1;
                }
                preT = T;
                
                if ( T->ltag==0 ) ///< 这里因为T->lchild进行判断决定是否继续递归，否则进入死循环
                    preInThread ( T->lchild, preT );
                if ( T->rtag==0 )
                    preInThread ( T->rchild, preT );
                }
           同理可以给出后序遍历线索二叉链表二叉树线索化算法实现：
            void postInThread(BiThrTree T, BiThrTree &preT) {
                if ( T==NULL ) return;
                
                if ( T->ltag==0 ) ///< 因为这里的T->lchild可能是T的前驱结点，如果不判断ltag，则会死循环
                    postInThread ( T->lchild, preT );
                if ( T->rtag==0 ) 
                    postInThread ( T->rchild, preT );
                    
                 // 访问操作
                if ( T->lchild==NULL ) { ///< 检测当前结点左指针为空
                    T->lchild = preT;
                    T->ltag   = 1;
                }
                if ( preT!=NULL && preT->rchild==NULL ) { ///< 检测前一结点的右指针为空
                    preT->rchild = T;
                    preT->rtag   = 1;
                }
                preT = T;
                
                }
    遍历：  
        要求：中序线索二叉树遍历
        算法思路：
            如果是空树，则返回
            否则：
                访问当前树的最左下结点，中序序列中排第一个的元素，其前驱是NULL，并访问该结点
                当当前结点标志位为1，且后继结点不为NULL时，直接找其后继结点，并进行访问，直到线索消失或后继结点为NULL
                否则，按照中序遍历规律，找其右子树的最左下结点，也就是继续循环遍历
                
        算法实现：
            void midOrderThrTraverse( BiThrTree T ) {
                while ( T ) {
                    // 一直找左孩子，最后一个左孩子为中序序列中排第一个的元素，其前驱是NULL
                    while ( T->ltag==0)
                        T = T->lchild;
                    
                    // 访问结点 
                    printf("%c", T->data);
                    
                    // 当结点标志位为1，且后继结点不为NULL时，直接找其后继结点
                    while ( T->rtag==1 && T->rchild!=NULL) {
                        T = T->rchild;
                        printf("%c", T->data);// 访问结点 
                    }
                    
                    // 否则，按照中序遍历规律，找其右子树的最左下结点，也就是继续循环遍历
                    T = T->rchild;
                }
            }
           
    分析：
        利用建立的线索二叉树找某个结点的前驱或后继，仍不能有效解决先序线索二叉树找先序前驱、后序线索二叉树找后序后继，综合后中序线索二叉树效果最好（不全是100%的效果）。
        线索化后的二叉树，遍历时比未进行线索化的树效率高：
            未线索化的遍历若采用递归，那么每一个元素都是递归调用一次函数后遍历出来；线索化的二叉树则可以不进行递归调用，而逐一按照某序顺序遍历出所有元素。
