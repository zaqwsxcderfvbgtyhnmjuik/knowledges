/// this is a topic about splay tree 伸展树 ///

伸展树
    局部性：
        locality:刚被访问过的数据，极有可能 很快地 再次被访问 之一现象在信息处理过程中屡见不鲜。
        例子：
            BST：刚刚被访问过的节点，极有可能很快地 再次被访问，下一将要访问的节点，极有可能就在刚被访问过节点的附近。
        提出问题：
            连续的m次查找（m >> n = |BST|）,采用AVL共需O(mlogn)时间，利用局部性能否更快？
    
    自适应调整：
        list/array：将刚访问的元素移到head之前，称为新的head,以更好的被下一次访问到；
        BST：借助list/array的自适应调整，将刚刚访问的元素移动到树根，即降低深度，以便于更好的被下一次访问到；是否可行？具体如何实现？
    
    逐层伸展：
        定义：节点v一旦被访问，随即转移至树根；
        实现手段：为了实现这一目标，我们所能借助的手段，依然无非是此前所介绍过的等价变换；具体来说就是对节点v进行zig和zag变换，如下：
            如果节点v在当前这一层是左孩子，我们就通过对它的父亲节点p做一次zig旋转
            
