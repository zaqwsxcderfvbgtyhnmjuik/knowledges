        
二、平衡二叉排序树:Binary balanced sort tree
    背景：
        问题：二叉排序树最坏情况下的ASL是(n+1)2,退化到同线性表线性查找一个级别；这是一个有待解决的客观问题。
        解决方法：做"平衡化"处理，即尽量让二叉树的形态平衡。
        关系图：
        CBT ⊂ BBST ⊂ BST
            CBT:complete binary tree
            BBST:balanced binary search tree 
            BST:binary search tree
        | |  |CBT | | |
        | |  |__ _| | |
        | |  BBST   | |
        | |__ __ __ | |
        |     BST     |
        |__ __ __ __ _| 
    定义：
        又称为AVL tree(Adelson-Velskii and Landis)，两位俄国科学家的名字简称。
        一颗平衡二叉树或者是空树，或者是具有下列性质的二叉排序树（binary sort tree）:
            1)左子树与右子树的高度之差的绝对值小于等于1；
                高度：空树的高度是0，只有根节点的树的高度为1
            2)左子树和右子树也是平衡二叉排序树；
        补充：
            a.为了方便起见，给每个结点附加一个数字，给出该结点左子树与右子树的高度差，称之为该结点的平衡因子(BF)。
                结点BF = 结点左子树的高度 - 结点右子树的高度；
            b.根据平衡二叉树的定义，结点的平衡因子只能是:-1, 0, 1；可以用于检验是否是平衡二叉树。
            c.对于一颗有n个结点的AVL树，其高度保持在O(log2n)数量级，ASL(average search length)也保持在O(log2n)数量级。
    
    失衡二叉排序树的分析与调整：
        失衡：
            当我们在一颗平衡二叉排序树上插入一个结点时，有可能导致失衡，即有一个或多个结点的平衡因子绝对值大于1的情况出现；
            当出现失衡情况，则必须调整树的结构，使之恢复平衡。
        
        平衡调整的类型：根据失衡原因进行分类
            结点A:失衡结点，由于结点C为根的子树插入新的结点，而失衡的结点；失衡的结点只存在于新插入结点的祖先结点中，与其他节点无关；不止一个失衡结点时，为最小失衡子树（结点数最少的失衡子树，即离新插入结点距离最近的祖先结点为根的子树）的根结点
            结点B:A结点的孩子，C结点的双亲
            C结点:将要插入新结点的子树的根结点，通常呢，C结点是一颗空树
            共四种，形如：结点A与结点B垂直投影在水平线后，A点与B点的距离绝对值是4个空格；同理，规定B结点和C结点垂直投影在水平线后，B点与C点的距离绝对值是2个空格(规定动机：根据二叉排序树定义可知，结点A、B、C的大小顺序为：
            结点A、B、C垂直投影到水平线上后，从左到右是递增的序列，如LL型投影后的大小顺序为C<B<A)。
                        A           A           A           A
                    B           B                   B           B
                  C               C               C               C
                    LL型         LR型             RL型         RR型
            说明：
                LL型：插入前，结点A平衡因子为+1；插入后，平衡因子为+2；于是A结点失衡
                RR型：插入前，结点A平衡因子为-1；插入后，平衡因子为-2；于是A结点失衡
                同理...
            补充：
                删除结点 失衡的结点只可能是其祖先结点，但至多一个祖先结点失衡
                    证明：若删除某一个结点后，距离最近的某个祖先结点Q失衡了，那么删除的结点必然在祖先结点Q的较短的子树分支，决定祖先结点Q的高度的是祖先结点Q较长的子树分支，于是不可能继续向上影响第二个祖先结点失衡，因为祖先结点Q的深度保持不变。
                插入结点 失衡的结点只可能是其祖先结点，几乎所有的祖先同时失衡
                注意是可能，就是存在删除 插入后不出现失衡结点， 删除至多存在一个失衡结点  插入至多存在祖先个数个失衡结点
                备注：尽管删除至多一个祖先失衡，但删除操作比插入操作更难。
                
        调整原则：
            1)降低高度：将高度从3降低为2
            2)保持二叉排序树性质：结点左孩子值小于结点值，结点右孩子值大于结点值
        四种失衡类型形态调整：各种失衡类型调整后正确结果仅有一种
                    A           A           A           A
                B           B                   B           B
              C               C               C               C
                LL型         LR型             RL型         RR型    
                ∨∨         ∨∨             ∨∨         ∨∨  
                B             C               C             B                             
            C       A     B       A       A       B     A       C
            
三、红黑树:Red black tree

四、B树:B tree

五、B+树:B plus tree

六、键树:Key tree
